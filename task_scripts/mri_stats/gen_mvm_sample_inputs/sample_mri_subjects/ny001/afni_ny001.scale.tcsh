#!/bin/tcsh -xef

echo "auto-generated by afni_proc.py, Wed Oct  8 10:50:13 2014"
echo "(version 4.20, Jul 11, 2014)"
echo "execution started: `date`"

# execute via : 
#   tcsh -xef afni_ny001.scale.tcsh 2>&1 | tee output.afni_ny001.scale.tcsh

# =========================== auto block: setup ============================
# script setup

# take note of the AFNI version
afni -ver

# check that the current AFNI version is recent enough
afni_history -check_date 13 May 2014
if ( $status ) then
    echo "** this script requires newer AFNI binaries (than 13 May 2014)"
    echo "   (consider: @update.afni.binaries -defaults)"
    exit
endif

# the user may specify a single subject to run with
if ( $#argv > 0 ) then
    set subj = $argv[1]
else
    set subj = ny001
endif

# assign output directory name
set output_dir = ny001.scale

# verify that the results directory does not yet exist
if ( -d $output_dir ) then
    echo output dir "$subj.results" already exists
    exit
endif

# set list of runs
set runs = (`count -digits 2 1 6`)

# create results and stimuli directories
mkdir $output_dir
mkdir $output_dir/stimuli

# copy stim files into stimulus directory
cp stim_times/bilingual/bil-afni_cond01.txt  \
    stim_times/bilingual/bil-afni_cond02.txt \
    stim_times/bilingual/bil-afni_cond03.txt \
    stim_times/bilingual/bil-afni_cond04.txt \
    stim_times/bilingual/bil-afni_cond05.txt \
    stim_times/bilingual/bil-afni_cond06.txt \
    stim_times/bilingual/bil-afni_cond07.txt \
    stim_times/bilingual/bil-afni_cond08.txt \
    stim_times/bilingual/bil-afni_cond09.txt \
    stim_times/bilingual/bil-afni_cond10.txt \
    stim_times/bilingual/bil-afni_cond11.txt \
    stim_times/bilingual/bil-afni_cond12.txt $output_dir/stimuli

# copy external motion file into results dir
cp ny001.results/dfile_rall.1D $output_dir

# copy extra files into results dir
cp -rv ny001.results/anat_final.ny001+tlrc.BRIK \
    ny001.results/anat_final.ny001+tlrc.HEAD $output_dir

# ============================ auto block: tcat ============================
# apply 3dTcat to copy input dsets to results dir, while
# removing the first 0 TRs
3dTcat -prefix $output_dir/pb00.$subj.r01.tcat \
    ny001.results/pb03.ny001.r01.blur+tlrc'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r02.tcat \
    ny001.results/pb03.ny001.r02.blur+tlrc'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r03.tcat \
    ny001.results/pb03.ny001.r03.blur+tlrc'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r04.tcat \
    ny001.results/pb03.ny001.r04.blur+tlrc'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r05.tcat \
    ny001.results/pb03.ny001.r05.blur+tlrc'[0..$]'
3dTcat -prefix $output_dir/pb00.$subj.r06.tcat \
    ny001.results/pb03.ny001.r06.blur+tlrc'[0..$]'

# and make note of repetitions (TRs) per run
set tr_counts = ( 126 126 126 126 126 126 )

# -------------------------------------------------------
# enter the results directory (can begin processing data)
cd $output_dir


# ========================== auto block: outcount ==========================
# data check: compute outlier fraction for each volume
touch out.pre_ss_warn.txt
foreach run ( $runs )
    3dToutcount -automask -fraction -polort 2 -legendre                     \
                pb00.$subj.r$run.tcat+tlrc > outcount.r$run.1D

    # censor outlier TRs per run, ignoring the first 0 TRs
    # - censor when more than 0.1 of automask voxels are outliers
    # - step() defines which TRs to remove via censoring
    1deval -a outcount.r$run.1D -expr "1-step(a-0.1)" > rm.out.cen.r$run.1D

    # outliers at TR 0 might suggest pre-steady state TRs
    if ( `1deval -a outcount.r$run.1D"{0}" -expr "step(a-0.4)"` ) then
        echo "** TR #0 outliers: possible pre-steady state TRs in run $run" \
            >> out.pre_ss_warn.txt
    endif
end

# catenate outlier counts into a single time series
cat outcount.r*.1D > outcount_rall.1D

# catenate outlier censor files into a single time series
cat rm.out.cen.r*.1D > outcount_${subj}_censor.1D

# ================================== mask ==================================
# create 'full_mask' dataset (union mask)
foreach run ( $runs )
    3dAutomask -dilate 1 -prefix rm.mask_r$run pb00.$subj.r$run.tcat+tlrc
end

# create union of inputs, output type is byte
3dmask_tool -inputs rm.mask_r*+tlrc.HEAD -union -prefix full_mask.$subj

# ================================= scale ==================================
# scale each voxel time series to have a mean of 100
# (be sure no negatives creep in)
# (subject to a range of [0,200])
foreach run ( $runs )
    3dTstat -prefix rm.mean_r$run pb00.$subj.r$run.tcat+tlrc
    3dcalc -a pb00.$subj.r$run.tcat+tlrc -b rm.mean_r$run+tlrc \
           -expr 'min(200, a/b*100)*step(a)*step(b)'           \
           -prefix pb01.$subj.r$run.scale
end

# ================================ regress =================================

# compute de-meaned motion parameters (for use in regression)
1d_tool.py -infile dfile_rall.1D -set_nruns 6                                 \
           -demean -write motion_demean.1D

# compute motion parameter derivatives (just to have)
1d_tool.py -infile dfile_rall.1D -set_nruns 6                                 \
           -derivative -demean -write motion_deriv.1D

# create censor file motion_${subj}_censor.1D, for censoring motion 
1d_tool.py -infile dfile_rall.1D -set_nruns 6                                 \
    -show_censor_count -censor_prev_TR                                        \
    -censor_motion 0.5 motion_${subj}

# combine multiple censor files
1deval -a motion_${subj}_censor.1D -b outcount_${subj}_censor.1D              \
       -expr "a*b" > censor_${subj}_combined_2.1D

# run the regression analysis
3dDeconvolve -input pb01.$subj.r*.scale+tlrc.HEAD                             \
    -censor censor_${subj}_combined_2.1D                                      \
    -polort 2 -float                                                          \
    -local_times                                                              \
    -num_stimts 18                                                            \
    -stim_times 1 stimuli/bil-afni_cond01.txt 'GAM'                           \
    -stim_label 1 english_speech_wrd                                          \
    -stim_times 2 stimuli/bil-afni_cond02.txt 'GAM'                           \
    -stim_label 2 english_speech_psd                                          \
    -stim_times 3 stimuli/bil-afni_cond03.txt 'GAM'                           \
    -stim_label 3 english_speech_cat                                          \
    -stim_times 4 stimuli/bil-afni_cond04.txt 'GAM'                           \
    -stim_label 4 english_print_psd                                           \
    -stim_times 5 stimuli/bil-afni_cond05.txt 'GAM'                           \
    -stim_label 5 english_print_wrd                                           \
    -stim_times 6 stimuli/bil-afni_cond06.txt 'GAM'                           \
    -stim_label 6 english_print_cat                                           \
    -stim_times 7 stimuli/bil-afni_cond07.txt 'GAM'                           \
    -stim_label 7 hebrew_speech_wrd                                           \
    -stim_times 8 stimuli/bil-afni_cond08.txt 'GAM'                           \
    -stim_label 8 hebrew_speech_psd                                           \
    -stim_times 9 stimuli/bil-afni_cond09.txt 'GAM'                           \
    -stim_label 9 hebrew_speech_cat                                           \
    -stim_times 10 stimuli/bil-afni_cond10.txt 'GAM'                          \
    -stim_label 10 hebrew_print_psd                                           \
    -stim_times 11 stimuli/bil-afni_cond11.txt 'GAM'                          \
    -stim_label 11 hebrew_print_wrd                                           \
    -stim_times 12 stimuli/bil-afni_cond12.txt 'GAM'                          \
    -stim_label 12 hebrew_print_cat                                           \
    -stim_file 13 motion_demean.1D'[0]' -stim_base 13 -stim_label 13 roll     \
    -stim_file 14 motion_demean.1D'[1]' -stim_base 14 -stim_label 14 pitch    \
    -stim_file 15 motion_demean.1D'[2]' -stim_base 15 -stim_label 15 yaw      \
    -stim_file 16 motion_demean.1D'[3]' -stim_base 16 -stim_label 16 dS       \
    -stim_file 17 motion_demean.1D'[4]' -stim_base 17 -stim_label 17 dL       \
    -stim_file 18 motion_demean.1D'[5]' -stim_base 18 -stim_label 18 dP       \
    -num_glt 17                                                               \
    -gltsym 'SYM: +english_speech_wrd +english_speech_psd +english_speech_cat \
    +english_print_psd +english_print_wrd +english_print_cat'                 \
    -glt_label 1 English_print_and_speech                                     \
    -gltsym 'SYM: +hebrew_speech_wrd +hebrew_speech_psd +hebrew_speech_cat    \
    +hebrew_print_psd +hebrew_print_wrd +hebrew_print_cat'                    \
    -glt_label 2 Hebrew_print_and_speech                                      \
    -gltsym 'SYM: +english_speech_wrd +english_speech_psd                     \
    +english_speech_cat'                                                      \
    -glt_label 3 English_speech                                               \
    -gltsym 'SYM: +english_print_psd +english_print_wrd +english_print_cat'   \
    -glt_label 4 English_print                                                \
    -gltsym 'SYM: +hebrew_speech_wrd +hebrew_speech_psd +hebrew_speech_cat'   \
    -glt_label 5 Hebrew_speech                                                \
    -gltsym 'SYM: +hebrew_print_psd +hebrew_print_wrd +hebrew_print_cat'      \
    -glt_label 6 Hebrew_print                                                 \
    -gltsym 'SYM: +english_speech_wrd -english_speech_psd'                    \
    -glt_label 7 English_speech_lexicality                                    \
    -gltsym 'SYM: +english_print_psd -english_print_wrd'                      \
    -glt_label 8 English_print_lexicality                                     \
    -gltsym 'SYM: +hebrew_speech_wrd -hebrew_speech_psd'                      \
    -glt_label 9 Hebrew_speech_lexicality                                     \
    -gltsym 'SYM: +hebrew_print_psd -hebrew_print_wrd'                        \
    -glt_label 10 Hebrew_print_lexicality                                     \
    -gltsym 'SYM: +english_speech_wrd -english_speech_psd -english_print_psd  \
    +english_print_wrd'                                                       \
    -glt_label 11 LexicalityXmodality_English                                 \
    -gltsym 'SYM: +hebrew_speech_wrd -hebrew_speech_psd -hebrew_print_psd     \
    +hebrew_print_wrd'                                                        \
    -glt_label 12 LexicalityXmodality_Hebrew                                  \
    -gltsym 'SYM: +english_print_psd +english_print_wrd +english_print_cat    \
    -hebrew_print_psd -hebrew_print_wrd -hebrew_print_cat'                    \
    -glt_label 13 English_print-Hebrew_print                                  \
    -gltsym 'SYM: +english_speech_wrd +english_speech_psd +english_speech_cat \
    -hebrew_speech_wrd -hebrew_speech_psd -hebrew_speech_cat'                 \
    -glt_label 14 English_speech-Hebrew_speech                                \
    -gltsym 'SYM: +english_speech_wrd +english_speech_psd +english_speech_cat \
    +english_print_psd +english_print_wrd +english_print_cat                  \
    -hebrew_speech_wrd -hebrew_speech_psd -hebrew_speech_cat                  \
    -hebrew_print_psd -hebrew_print_wrd -hebrew_print_cat'                    \
    -glt_label 15 English-Hebrew                                              \
    -gltsym 'SYM: +english_speech_wrd +english_speech_psd +english_speech_cat \
    -english_print_psd -english_print_wrd -english_print_cat'                 \
    -glt_label 16 English-speech-English_print                                \
    -gltsym 'SYM: +hebrew_speech_wrd +hebrew_speech_psd +hebrew_speech_cat    \
    -hebrew_print_psd -hebrew_print_wrd -hebrew_print_cat'                    \
    -glt_label 17 Hebrew_speech-Hebrew_print                                  \
    -jobs 16                                                                  \
    -fout -tout -x1D X.xmat.1D -xjpeg X.jpg                                   \
    -x1D_uncensored X.nocensor.xmat.1D                                        \
    -fitts fitts.$subj                                                        \
    -errts errts.${subj}                                                      \
    -bucket stats.$subj


# if 3dDeconvolve fails, terminate the script
if ( $status != 0 ) then
    echo '---------------------------------------'
    echo '** 3dDeconvolve error, failing...'
    echo '   (consider the file 3dDeconvolve.err)'
    exit
endif


# display any large pariwise correlations from the X-matrix
1d_tool.py -show_cormat_warnings -infile X.xmat.1D |& tee out.cormat_warn.txt

# -- execute the 3dREMLfit script, written by 3dDeconvolve --
tcsh -x stats.REML_cmd 

# if 3dREMLfit fails, terminate the script
if ( $status != 0 ) then
    echo '---------------------------------------'
    echo '** 3dREMLfit error, failing...'
    exit
endif


# create an all_runs dataset to match the fitts, errts, etc.
3dTcat -prefix all_runs.$subj pb01.$subj.r*.scale+tlrc.HEAD

# --------------------------------------------------
# create a temporal signal to noise ratio dataset 
#    signal: if 'scale' block, mean should be 100
#    noise : compute standard deviation of errts
3dTstat -mean -prefix rm.signal.all all_runs.$subj+tlrc
3dTstat -stdev -prefix rm.noise.all errts.${subj}_REML+tlrc
3dcalc -a rm.signal.all+tlrc                                                  \
       -b rm.noise.all+tlrc                                                   \
       -c full_mask.$subj+tlrc                                                \
       -expr 'c*a/b' -prefix TSNR.$subj 

# ---------------------------------------------------
# compute and store GCOR (global correlation average)
# (sum of squares of global mean of unit errts)
3dTnorm -norm2 -prefix rm.errts.unit errts.${subj}_REML+tlrc
3dmaskave -quiet -mask full_mask.$subj+tlrc rm.errts.unit+tlrc >              \
    gmean.errts.unit.1D
3dTstat -sos -prefix - gmean.errts.unit.1D\' > out.gcor.1D
echo "-- GCOR = `cat out.gcor.1D`"

# create ideal files for fixed response stim types
1dcat X.nocensor.xmat.1D'[18]' > ideal_english_speech_wrd.1D
1dcat X.nocensor.xmat.1D'[19]' > ideal_english_speech_psd.1D
1dcat X.nocensor.xmat.1D'[20]' > ideal_english_speech_cat.1D
1dcat X.nocensor.xmat.1D'[21]' > ideal_english_print_psd.1D
1dcat X.nocensor.xmat.1D'[22]' > ideal_english_print_wrd.1D
1dcat X.nocensor.xmat.1D'[23]' > ideal_english_print_cat.1D
1dcat X.nocensor.xmat.1D'[24]' > ideal_hebrew_speech_wrd.1D
1dcat X.nocensor.xmat.1D'[25]' > ideal_hebrew_speech_psd.1D
1dcat X.nocensor.xmat.1D'[26]' > ideal_hebrew_speech_cat.1D
1dcat X.nocensor.xmat.1D'[27]' > ideal_hebrew_print_psd.1D
1dcat X.nocensor.xmat.1D'[28]' > ideal_hebrew_print_wrd.1D
1dcat X.nocensor.xmat.1D'[29]' > ideal_hebrew_print_cat.1D

# --------------------------------------------------------
# compute sum of non-baseline regressors from the X-matrix
# (use 1d_tool.py to get list of regressor colums)
set reg_cols = `1d_tool.py -infile X.nocensor.xmat.1D -show_indices_interest`
3dTstat -sum -prefix sum_ideal.1D X.nocensor.xmat.1D"[$reg_cols]"

# also, create a stimulus-only X-matrix, for easy review
1dcat X.nocensor.xmat.1D"[$reg_cols]" > X.stim.xmat.1D

# ================== auto block: generate review scripts ===================

# generate a review script for the unprocessed EPI data
gen_epi_review.py -script @epi_review.$subj                         \
    -dsets pb00.$subj.r*.tcat+tlrc.HEAD

# generate scripts to review single subject results
# (try with defaults, but do not allow bad exit status)
gen_ss_review_scripts.py -mot_limit 0.5 -out_limit 0.1 -motion_dset \
    dfile_rall.1D -exit0

# ========================== auto block: finalize ==========================

# remove temporary files
\rm -f rm.*

# if the basic subject review script is here, run it
# (want this to be the last text output)
if ( -e @ss_review_basic ) ./@ss_review_basic |& tee out.ss_review.$subj.txt

# return to parent directory
cd ..

echo "execution finished: `date`"




# ==========================================================================
# script generated by the command:
#
# afni_proc.py -subj_id ny001 -script afni_ny001.scale.tcsh -out_dir          \
#     ny001.scale -dsets ny001.results/pb03.ny001.r01.blur+tlrc.HEAD          \
#     ny001.results/pb03.ny001.r02.blur+tlrc.HEAD                             \
#     ny001.results/pb03.ny001.r03.blur+tlrc.HEAD                             \
#     ny001.results/pb03.ny001.r04.blur+tlrc.HEAD                             \
#     ny001.results/pb03.ny001.r05.blur+tlrc.HEAD                             \
#     ny001.results/pb03.ny001.r06.blur+tlrc.HEAD -blocks mask scale regress  \
#     -copy_files ny001.results/anat_final.ny001+tlrc.BRIK                    \
#     ny001.results/anat_final.ny001+tlrc.HEAD -regress_stim_times            \
#     stim_times/bilingual/bil-afni_cond01.txt                                \
#     stim_times/bilingual/bil-afni_cond02.txt                                \
#     stim_times/bilingual/bil-afni_cond03.txt                                \
#     stim_times/bilingual/bil-afni_cond04.txt                                \
#     stim_times/bilingual/bil-afni_cond05.txt                                \
#     stim_times/bilingual/bil-afni_cond06.txt                                \
#     stim_times/bilingual/bil-afni_cond07.txt                                \
#     stim_times/bilingual/bil-afni_cond08.txt                                \
#     stim_times/bilingual/bil-afni_cond09.txt                                \
#     stim_times/bilingual/bil-afni_cond10.txt                                \
#     stim_times/bilingual/bil-afni_cond11.txt                                \
#     stim_times/bilingual/bil-afni_cond12.txt -regress_stim_labels           \
#     english_speech_wrd english_speech_psd english_speech_cat                \
#     english_print_psd english_print_wrd english_print_cat hebrew_speech_wrd \
#     hebrew_speech_psd hebrew_speech_cat hebrew_print_psd hebrew_print_wrd   \
#     hebrew_print_cat -regress_local_times -regress_basis GAM                \
#     -regress_motion_file ny001.results/dfile_rall.1D -regress_reml_exec     \
#     -regress_censor_outliers 0.1 -regress_censor_motion 0.5                 \
#     -regress_opts_3dD -num_glt 17 -gltsym 'SYM: +english_speech_wrd         \
#     +english_speech_psd +english_speech_cat +english_print_psd              \
#     +english_print_wrd +english_print_cat' -glt_label 1                     \
#     English_print_and_speech -gltsym 'SYM: +hebrew_speech_wrd               \
#     +hebrew_speech_psd +hebrew_speech_cat +hebrew_print_psd                 \
#     +hebrew_print_wrd +hebrew_print_cat' -glt_label 2                       \
#     Hebrew_print_and_speech -gltsym 'SYM: +english_speech_wrd               \
#     +english_speech_psd +english_speech_cat' -glt_label 3 English_speech    \
#     -gltsym 'SYM: +english_print_psd +english_print_wrd +english_print_cat' \
#     -glt_label 4 English_print -gltsym 'SYM: +hebrew_speech_wrd             \
#     +hebrew_speech_psd +hebrew_speech_cat' -glt_label 5 Hebrew_speech       \
#     -gltsym 'SYM: +hebrew_print_psd +hebrew_print_wrd +hebrew_print_cat'    \
#     -glt_label 6 Hebrew_print -gltsym 'SYM: +english_speech_wrd             \
#     -english_speech_psd' -glt_label 7 English_speech_lexicality -gltsym     \
#     'SYM: +english_print_psd -english_print_wrd' -glt_label 8               \
#     English_print_lexicality -gltsym 'SYM: +hebrew_speech_wrd               \
#     -hebrew_speech_psd' -glt_label 9 Hebrew_speech_lexicality -gltsym 'SYM: \
#     +hebrew_print_psd -hebrew_print_wrd' -glt_label 10                      \
#     Hebrew_print_lexicality -gltsym 'SYM: +english_speech_wrd               \
#     -english_speech_psd -english_print_psd +english_print_wrd' -glt_label   \
#     11 LexicalityXmodality_English -gltsym 'SYM: +hebrew_speech_wrd         \
#     -hebrew_speech_psd -hebrew_print_psd +hebrew_print_wrd' -glt_label 12   \
#     LexicalityXmodality_Hebrew -gltsym 'SYM: +english_print_psd             \
#     +english_print_wrd +english_print_cat -hebrew_print_psd                 \
#     -hebrew_print_wrd -hebrew_print_cat' -glt_label 13                      \
#     English_print-Hebrew_print -gltsym 'SYM: +english_speech_wrd            \
#     +english_speech_psd +english_speech_cat -hebrew_speech_wrd              \
#     -hebrew_speech_psd -hebrew_speech_cat' -glt_label 14                    \
#     English_speech-Hebrew_speech -gltsym 'SYM: +english_speech_wrd          \
#     +english_speech_psd +english_speech_cat +english_print_psd              \
#     +english_print_wrd +english_print_cat -hebrew_speech_wrd                \
#     -hebrew_speech_psd -hebrew_speech_cat -hebrew_print_psd                 \
#     -hebrew_print_wrd -hebrew_print_cat' -glt_label 15 English-Hebrew       \
#     -gltsym 'SYM: +english_speech_wrd +english_speech_psd                   \
#     +english_speech_cat -english_print_psd -english_print_wrd               \
#     -english_print_cat' -glt_label 16 English-speech-English_print -gltsym  \
#     'SYM: +hebrew_speech_wrd +hebrew_speech_psd +hebrew_speech_cat          \
#     -hebrew_print_psd -hebrew_print_wrd -hebrew_print_cat' -glt_label 17    \
#     Hebrew_speech-Hebrew_print -jobs 16 -bash -execute
